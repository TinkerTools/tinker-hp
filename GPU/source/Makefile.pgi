#
#   Makefile for Tinker-HP using PGI compilers
#

#
#   Compiler
#
RunF77       = mpif90
RunCXX       = mpic++
RunCUFC      = mpif90
RunCUCC     := nvcc

# Comma and space characters
comma__     := ,
empty__     :=
space__     := $(empty__) $(empty__)

# top-level directory
makefile_path__ := $(abspath $(lastword $(MAKEFILE_LIST)))
makefile_dir__  := $(dir $(makefile_path__))
# `make' will not complain if file `top_dir.mk' does not exist
-include top_dir.mk
ifeq (,$(top_dir__))
   top_dir__ := $(realpath $(makefile_dir__)/..)
endif

# Installation directory and programm suffix
prefix      :=../bin
# Suffix on executables
prog_suffix :=
# Compilation optimisation (release|debug)
opt         := release
# Precision of floating point numbers and options (double|[m]ixed|[s]ingle)
prec        := double

arch        := device
main_prec   := d

install_libdir      := $(top_dir__)/lib
mlplugin_installdir := $(top_dir__)/lib
mlplugin_name       := mlinterface

config_file__  ?= config.nvidia.mk

#
#  OPTIONS
# ________

# HIP Compilation
HIP_SUPPORT ?= 0
# Device OpenMP Support
OPENMP_SUPPORT ?= 0
# Wether to build with NVSHMEM
NVSHMEM_SUPPORT ?= 0
# Wether to build with NVTX
NVTX_SUPPORT ?= 0
# Select FFTW (0=generic; 1=other)
FFTW_SUPPORT ?= 0
# Force Othrogonal box shape
ORTHO_BOX_ONLY_SUPPORT ?= 0
# Remove Soft core computation
NO_MUTATION ?= 0
# Fixed Precision Arithmetic
FPA_SUPPORT ?= 0
# Plumed Feature
PLUMED_SUPPORT ?= 0
# Colvar Feature
COLVARS_SUPPORT ?= 0
# Tcl Feature within colvar library
TCL_SUPPORT ?= 0
# NN Feature
NN_SUPPORT  ?= 0
# Verbosity
VERBOSE     ?= 0
# Release Build
REL_BUILD   ?= 1

mkfile_path := $(abspath $(lastword $(MAKEFILE_LIST)))
mkfile_dir := $(dir $(mkfile_path))

#  librarie's directory (MKL, FFT, 2DECOMP, CUDA, std C++, Thrust Wrapper)
#  ___________________________________________________________

MKLROOT       ?= /opt/intel/mkl
FFTW_DIR      ?= $(FFTW)
FFTDECOMPDIR  ?= ../2decomp_fft
CUDA_HOME     ?= /usr/local/cuda
#  For regular linux system
GNUROOT       ?= /usr
THRUST_WRAP   ?= ../wrappers
NVSHMEM_HOME  ?= /usr/local/nvshmem
PLUMED_HOME   ?= ../plumed/Portland
COLVARS_HOME  ?= $(top_dir__)/colvars
TCL_HOME      ?= $(top_dir__)/tcl8.6.13/unix
TCL_HOME__    := $(top_dir__)/tcl8.6.13/unix

# MKL
INC_MKL      = $(MKLROOT)/include
LIB_MKL      = $(MKLROOT)/lib/intel64 -lmkl_intel_lp64 -lmkl_sequential -lmkl_core
# LAPACK
LIB_LAPACK   = -llapack -llapack_lp64 -lblas
# FFTW
ifeq ($(FFTW_SUPPORT), 1)
  INC_FFT        = $(FFTW_DIR)/include
  LIB_FFT        = $(FFTW_DIR)/lib -lfftw3 -lfftw3f
endif
#  Path to gcc library on Jean Zay Cluster
## /### GNUROOT is supplied when sourcing ../ci/pgi_config.sh in the corresponding branch
## Don't forget to do so if rebuilding
INC_CPP        = $(GNUROOT)
ifneq ($(LIB_STDCPP_DIR),$(empty__))
   LIB_CPP        = $(LIB_STDCPP_DIR) -lstdc++
else
   LIB_CPP        = $(GNUROOT)/lib64 -lstdc++
endif

inc_decompfft := include
lib_decompfft := l2decomp_fft
conf_decompfft:= Makefile.inc.pgi
INC_FFTDECOMP  = $(FFTDECOMPDIR)/$(inc_decompfft)
LIB_FFTDECOMP  = $(FFTDECOMPDIR)/lib -$(lib_decompfft)

INC_CUDA       = $(CUDA_HOME)/include
LIB_CUDA       = $(CUDA_HOME)/lib64
LIB_CUDA_DRIVER= $(CUDA_HOME)/lib64/stubs -lcuda

INC_WRAP       = $(THRUST_WRAP)
LIB_WRAP       = $(THRUST_WRAP) -lwrapper

INC_NVSHMEM    = $(NVSHMEM_HOME)/include
LIB_NVSHMEM    = $(NVSHMEM_HOME)/lib -lnvshmem

INC_PLUMED     = $(PLUMED_HOME)/include
LIB_PLUMED     = $(PLUMED_HOME)/lib -lplumed -lplumedKernel
plumed_config_file = Makefile.conf.nvhpc

INC_COLVARS    = $(COLVARS_HOME)
LIB_COLVARS    = $(COLVARS_HOME) -lcolvars -lmpi_cxx

ifeq ($(COLVARS_SUPPORT),1)
   TCL_SUPPORT := 1
endif
ifeq ($(TCL_HOME),$(TCL_HOME__))
   INC_TCL        = $(TCL_HOME)/../generic
   LIB_TCL        = $(install_libdir) -ltcl8.6
else
   INC_TCL        = $(TCL_HOME)/include
   LIB_TCL        = $(TCL_HOME)/lib -ltcl8.6
endif

library_link__ := static
lib_dir__      := $(HOME)/local/lib

include $(config_file__)

#  -----------------  #
## List Object Files ##
#  -----------------  #
MODSHA  = MOD_tinheader.o
MODSHA += MOD_nvtx.o
MODSHA += MOD_sizes.o
MODSHA += MOD_memory.o

MODSAM  = MOD_action.o MOD_analyz.o MOD_angang.o MOD_angle.o\
   MOD_angpot.o MOD_angtor.o MOD_ani.o MOD_argue.o MOD_ascii.o MOD_atmlst.o\
   MOD_atoms.o MOD_atmtyp.o MOD_bath.o MOD_bitor.o\
   MOD_bndpot.o MOD_bond.o MOD_bound.o MOD_boxes.o\
   MOD_cell.o MOD_cflux.o MOD_charge.o MOD_chgpen.o MOD_chgpot.o MOD_chgtrn.o MOD_chunks.o\
   MOD_colvars.o MOD_couple.o MOD_ctrpot.o MOD_cutoff.o\
	MOD_dcdio.o MOD_deconvolution.o MOD_deriv.o MOD_disp.o MOD_divcon.o\
   MOD_domdec.o MOD_dsppot.o MOD_energi.o MOD_ewald.o MOD_fft.o\
   MOD_fields.o MOD_files.o MOD_freeze.o MOD_group.o\
   MOD_improp.o MOD_imptor.o MOD_inform.o MOD_inter.o MOD_interfaces.o\
   MOD_iounit.o MOD_kanang.o MOD_kangs.o MOD_kantor.o MOD_katoms.o\
   MOD_kbonds.o MOD_kcflux.o MOD_kchrge.o MOD_kcpen.o MOD_kctrn.o MOD_kdsp.o MOD_keys.o MOD_khbond.o\
   MOD_kiprop.o MOD_kgeoms.o MOD_kitors.o MOD_kmulti.o\
   MOD_kopbnd.o MOD_kopdst.o MOD_kpitor.o MOD_kpolr.o MOD_krepl.o\
   MOD_kstbnd.o MOD_ksttor.o MOD_ktorsn.o MOD_ktrtor.o\
   MOD_kurybr.o MOD_kvdwpr.o MOD_kvdws.o MOD_langevin.o\
   MOD_linmin.o
MODSNZ += MOD_math.o MOD_mamd.o MOD_mdstate.o MOD_msmd.o MOD_merck.o MOD_mpole.o MOD_mdstuf.o\
   MOD_minima.o MOD_molcul.o MOD_moldyn.o MOD_mplpot.o\
   MOD_mutant.o MOD_neigh.o MOD_opbend.o MOD_opdist.o\
   MOD_output.o MOD_orthogonalize.o MOD_params.o MOD_pitors.o MOD_plumed.o MOD_pme.o\
   MOD_polar.o MOD_polgrp.o MOD_polpot.o MOD_erf.o\
   MOD_potent.o MOD_precis.o MOD_ptable.o MOD_qtb.o MOD_random.o MOD_repel.o MOD_replicas.o MOD_reppot.o MOD_resdue.o\
   MOD_ring.o MOD_scales.o MOD_shunt.o MOD_spectra.o MOD_strbnd.o\
   MOD_strtor.o MOD_timestat.o MOD_titles.o MOD_torpot.o\
   MOD_tors.o MOD_tortor.o MOD_units.o MOD_uprior.o\
   MOD_urey.o MOD_urypot.o MOD_usage.o MOD_vec.o MOD_vdwpot.o MOD_vdw.o MOD_virial.o
MODSNZ += MOD_utils.o MOD_utilcomm.o MOD_utilvec.o MOD_utilgpu.o MOD_utilbaoab.o
MODSNZ += MOD_beads.o MOD_commstuffpi.o MOD_utilbaoabpi.o
MODSNZ += MOD_precompute_polegpu.o MOD_USampling.o

# Cuda-Fortran object Files
MODCU  = MOD_utilcu.o
MODCU += echargecu.o echgljcu.o
MODCU += echgtrncu.o
MODCU += efld0_cpencu.o
MODCU += ehal1cu.o
MODCU += eljcu.o
MODCU += eliaison1cu.o
MODCU += empole1cu.o empole_cpencu.o
MODCU += epolar1cu.o epolar_cpencu.o
MODCU += nblistcu.o
MODCU += pmestuffcu.o
MODCU += tmatxb_pmecu.o tmatxb_pme_cpen.cu.o

OBJSAM = active.o analysis.o angles.o\
   MOD_subDeriv.o MOD_subMemory.o MOD_subInform.o MOD_subAtoms.o\
   beads.o\
   nblistgpu.o nblist_build.gpu.o\
   alterchg.o alterchg.gpu.o ani.o attach.o basefile.o beeman.o bicubic.o\
   baoab.o baoab_util.o baoabrespa.o baoabrespa1.o baoabpi.o baoabrespapi.o bbk.o\
   bitors.o bonds.o bounds.o calendar.o\
   chkpole.o chkpolegpu.o chkring.o chkxyz.o cholesky.o cluster.o\
   colvars.o command.o control.o cspline.o cutoffs.o\
   damping.o dcdio.o dcflux.o dcflux.gpu.o diis.o domdecstuff.o\
   dcinduce_pme.o dcinduce_pmegpu.o dcinduce_pme2.o dcinduce_pme2gpu.o dcinduce_shortreal.o dcinduce_shortrealgpu.o\
   eamd1.o eangang.o eangang1.o eangang3.o\
   eangle.o eangle1.o eangle1gpu.o eangle3.o eangle3gpu.o\
   eangtor.o eangtor1.o eangtor3.o\
   ebond.o ebond1.o ebond1gpu.o ebond3.o ebond3gpu.o\
   echarge.o echarge1.o echarge1gpu.o echarge3.o echarge3gpu.o\
   echgtrn.o echgtrn1.o echgtrn1gpu.o echgtrn3.o echgtrn3gpu.o\
   edisp.o edisp1.o edisp3.o\
   efld0_direct.o efld0_directgpu.o\
   egeom.o egeom1.o egeom1gpu.o egeom3.o egeom3gpu.o\
   ehal.o ehal1.o ehal1gpu.o ehal3.o ehal3gpu.o\
   eimprop.o eimprop1.o eimprop1gpu.o eimprop3.o\
   eimptor.o eimptor1.o eimptor1gpu.o eimptor3.o\
   elj.o elj1.o elj1gpu.o elj3.o elj3gpu.o\
   eliaison1gpu.o\
   empole.o empole1.o empole1gpu.o empole1_group.o empole3.o empole3gpu.o empole3_group.o\
   energy.o\
   eopbend.o eopbend1.o eopbend1gpu.o eopbend3.o eopbend3gpu.o\
   eopdist.o eopdist1.o eopdist3.o\
   epitors.o epitors1.o epitors1gpu.o epitors3.o\
   epolar.o epolar1.o epolar1gpu.o epolar1_group.o epolar3.o epolar3gpu.o epolar3_group.o\
   erepel.o erepel1.o erepel3.o\
   esmd1.o\
   estrbnd.o estrbnd1.o estrbnd1gpu.o estrbnd3.o\
   estrtor.o estrtor1.o estrtor1gpu.o estrtor3.o\
   etors.o etors1.o etors1gpu.o etors3.o\
   etortor.o etortor1.o etortor1gpu.o etortor3.o\
   eurey.o eurey1.o eurey1gpu.o eurey3.o  eurey3gpu.o\
   evcorr.o extra.o extra1.o extra3.o\
   fatal.o fft_mpi.o field.o\
   final.o freeunit.o geometry.o getkey.o\
   getnumb.o getprm.o getstring.o gettext.o\
   getword.o getxyz.o gradient.o groups.o\
   image.o\
   initatom.o initial.o initprm.o initres.o\
   invert.o kangang.o kangle.o\
   kamd.o katom.o kangtor.o kbond.o\
   kcharge.o kchgflx.o kchgtrn.o\
   kdisp.o kewald.o kgeom.o\
   kimprop.o kimptor.o kinetic.o kmlpot.o kmpole.o\
   kopbend.o kopdist.o kpitors.o kpolar.o krepel.o\
   kstrbnd.o kstrtor.o kscalfactor.o ksmd.o ktors.o ktortor.o\
   kurey.o kvdw.o lattice.o lbfgs.o\
   linalg.o maxwell.o mdinit.o mdinitbead.o mdinitreps.o mdrest.o\
   mdsave.o mdsavebeads.o mdstat.o mdstatpi.o mdstate.gpu.o mechanic.o\
   molecule.o mpistuff.o mpiUtils.gpu.o mutate.o
ifeq ($(COLVARS_SUPPORT),1)
   OBJSAM += colvarproxy_tinkerhp.o
endif

# Cuda-C object Files
OBJCU  = cu_CholeskySolver.o
OBJCU += cu_nblist.o
OBJCU += cu_tmatxb_pme.o
OBJCU += cu_mpole1.o
ifeq ($(NVSHMEM_SUPPORT),1)
   OBJCU += cu_nvshmem_wrap.o
else ifeq ($(findstring NVSHMEM, $(OPTIONS)),NVSHMEM)
   OBJCU += cu_nvshmem_wrap.o
endif

OBJSNZ  = nblist.o
OBJSNZ += newinduce_pme.o newinduce_pmegpu.o newinduce_pme2.o newinduce_pme2gpu.o newinduce_group.o newinduce_shortreal.o newinduce_shortrealgpu.o
OBJSNZ += nextarg.o
OBJSNZ += nexttext.o
OBJSNZ += nspline.o
OBJSNZ += number.o
OBJSNZ += numeral.o
OBJSNZ += orthogonalize.o
OBJSNZ += openend.o
OBJSNZ += optsave.o
OBJSNZ += plumed.o
OBJSNZ += pmestuff.o pmestuffgpu.o
OBJSNZ += precise.o
OBJSNZ += pressure.o
OBJSNZ += prime.o
OBJSNZ += promo.o promoamd.o promosmd.o
OBJSNZ += prmkey.o
OBJSNZ += prtdynbeads.o prtdyn.o prtxyz.o
OBJSNZ += readdyn.o readprm.o readxyz.o
OBJSNZ += respa.o respa1.o
OBJSNZ += rings.o
OBJSNZ += rotpole.o rotpolegpu.o
OBJSNZ += search.o sort.o
OBJSNZ += rattle.o shakeup.o
OBJSNZ += suffix.o
OBJSNZ += switch.o switch_group.o
OBJSNZ += temper.o
OBJSNZ += tmatxb_pme.o tmatxb_pmegpu.o
OBJSNZ += torphase.o
OBJSNZ += torque.o torquegpu.o
OBJSNZ += torsions.o
OBJSNZ += trimtext.o
OBJSNZ += unitcell.o
OBJSNZ += verlet.o
OBJSNZ += version.o

# Tinker main programs object files
PROGOBJ  = analyze.o
PROGOBJ += analyze_beads.o
PROGOBJ += bar.o
PROGOBJ += dynamic.o
PROGOBJ += minimize.o
PROGOBJ += testgrad.o
PROGOBJ += pibar.o
PROGOBJ += pimd.o
PROGOBJ += radial.o

ifeq ($(arch),$(filter $(arch),device gpu))
   ifeq ($(HIP_SUPPORT),0)
      MODS = $(MODSHA) $(MODSAM) $(MODSNZ) $(MODCU)
      OBJS = $(OBJCU) $(OBJSAM) $(OBJSNZ)
   else
      MODS = $(MODSHA) $(MODSAM) $(MODSNZ)
      OBJS = $(OBJSAM) $(OBJSNZ)
   endif
   library = library.make
else ifeq ($(arch),$(filter $(arch),host cpu))
   MODS    = $(MODSHA) $(MODSAM) $(MODSNZ)
   OBJS    = $(OBJSAM) $(OBJSNZ)
   library = library_host.make
endif


   ############################
###----------------------------###
#  LIST AND TARGETS DESCRIPTION  #
###----------------------------###
   ############################

all: analyze bar pibar dynamic minimize pimd radial analyze_beads

everything: analyze bar pibar dynamic minimize pimd radial testgrad analyze_beads

#
analyze: libtinker $(mlplugin_name)
	$(RunF77) $(FFLAGS2) -o $@.x $@.$(fobj_lext__) $(LIBS) $(LDLIBS)
	mv $@.x $(prefix)/$@$(bin_sufx)
#
analyze_beads: libtinker $(mlplugin_name)
	$(RunF77) $(FFLAGS2) -o $@.x $@.$(fobj_lext__) $(LIBS) $(LDLIBS)
	mv $@.x $(prefix)/$@$(bin_sufx)
#
dynamic: libtinker $(mlplugin_name)
	$(RunF77) $(FFLAGS2) -o $@.x $@.$(fobj_lext__) $(LIBS) $(LDLIBS)
	mv $@.x $(prefix)/$@$(bin_sufx)
	@[ $(PLUMED_SUPPORT) -eq 1 ] && echo && \
	echo '                         !!!    ATTENTION    !!!' && \
	echo '-----------------------------------------------------------------------------------' && \
	echo ' Please update <LD_LIBRARY_PATH> environment variable using' && \
	echo " the following command in order to locate Plumed library at runtime " && \
	echo && \
	echo ' &> export LD_LIBRARY_PATH=$(top_dir__)/plumed/Portland/lib:$$LD_LIBRARY_PATH' && \
	echo && \
	echo '-----------------------------------------------------------------------------------' || :
	@ if [ $(NN_SUPPORT) -eq 1 ] || [ $(TCL_SUPPORT) -eq 1 ]; then \
	echo && \
	echo '                         !!!    ATTENTION    !!!' && \
	echo '-----------------------------------------------------------------------------------' && \
	echo ' Please update <LD_LIBRARY_PATH> environment variable using' && \
	echo " the following command in order to expose dynamic libraries at runtime " && \
	echo && \
	echo ' &> export LD_LIBRARY_PATH=$(install_libdir):$$LD_LIBRARY_PATH' && \
	echo && \
	echo '-----------------------------------------------------------------------------------'; \
	fi
#
dynamic1:
	$(RunF77) $(FFLAGS2) -o dynamic.x dynamic.$(fobj_lext__) $(LIBS) $(LDLIBS)
	mv dynamic.x $(prefix)/$@$(bin_sufx)
#
.PHONY: dynamic.cpu
dynamic.cpu:
	@$(MAKE) arch=host prog_suffix=.cpu dynamic
#
.PHONY: dynamic.single
dynamic.single:
	@$(MAKE) prec=single prog_suffix=.single dynamic
#
.PHONY: dynamic.mixed
dynamic.mixed:
	@$(MAKE) prec=mixed prog_suffix=.mixed dynamic
#
.PHONY: dynamic.gpu
dynamic.gpu:
	@$(MAKE) prog_suffix=.gpu dynamic
#
.PHONY: dynamic.cpuh
dynamic.cpuh: build_mod $(OBJS)
	@$(MAKE) cleanobjhost
	@$(MAKE) compilehost
	@$(MAKE) link_dynamic.cpu
	@$(MAKE) cleanobjhost
	@$(MAKE) dynamic
#
link_dynamic.cpu: libtinker
	$(RunF77) $(FFLAGS2) -o $(prefix)/dynamic.cpuh dynamic.o $(LIBS) $(LDLIBS)
	@echo "**"
	@echo "**  dynamic.cpu hybrid binary is successfully made "
	@echo "**"
#
pimd: libtinker $(mlplugin_name)
	$(RunF77) $(FFLAGS2) -o pimd.x pimd.$(fobj_lext__) $(LIBS) $(LDLIBS)
	mv pimd.x $(prefix)/$@$(bin_sufx)
#
radial: libtinker
	$(RunF77) $(FFLAGS2) -o radial.x radial.$(fobj_lext__) $(LIBS) $(LDLIBS)
	mv radial.x $(prefix)/$@$(bin_sufx)

# --  Building modules files
build_mod: FFLAGS=$(GPUFLAGS)
build_mod: $(MODS)
#
# --  Building object files
build_obj: $(OBJS) $(PROGOBJ)
#
testgrad: libtinker
	$(RunF77) $(FFLAGS2) -o $@.x $@.$(fobj_lext__) $(LIBS) $(LDLIBS)
	mv $@.x $(prefix)/$@$(bin_sufx)
#
minimize: libtinker
	$(RunF77) $(FFLAGS2) -o $@.x $@.$(fobj_lext__) $(LIBS) $(LDLIBS)
	mv $@.x $(prefix)/$@$(bin_sufx)
#
.PHONY: bar
bar: libtinker
	$(RunF77) $(FFLAGS2) -o $@.x $@.$(fobj_lext__) $(LIBS) $(LDLIBS)
	mv $@.x $(prefix)/$@$(bin_sufx)
#
.PHONY: pibar
pibar: libtinker $(mlplugin_name)
	$(RunF77) $(FFLAGS2) -o $@.x $@.$(fobj_lext__) $(LIBS) $(LDLIBS)
	mv $@.x $(prefix)/$@$(bin_sufx)
#

libtinker: $(depend_targets)
	@ $(MAKE) build_mod
	@ $(MAKE) build_obj
ifeq ($(library_link__),static)
	@echo
	@echo "***** Making libtinker.a *****"
	@ar -crs $@.a ${MODS} ${OBJS}
else
	@echo
	@echo "***** Making libtinker.so *****"
	@$(RunF77) -fPIC -shared -o $@.so ${MODS} ${OBJS}
	@cp $@.so $(lib_dir__)
endif


#  ----------------------  #
## Neural Network Package ##
#  ----------------------  #
.PHONY: $(mlplugin_name)
ifeq ($(NN_SUPPORT),1)

$(mlplugin_name): lib$(mlplugin_name).dylib $(mlplugin_installdir)/lib$(mlplugin_name).dylib

lib$(mlplugin_name).dylib: mlbuilder.py $(mlplugin_name).py $(mlplugin_name).h
	$(AT) python mlbuilder.py

$(mlplugin_installdir)/lib$(mlplugin_name).dylib: lib$(mlplugin_name).dylib
	$(AT) mkdir -p $(mlplugin_installdir) && \
	cp $< $@

else

$(mlplugin_name):

endif

#  --------------  #
## Plumed Package ##
#  --------------  #
.PHONY: plumed
plumed:
	$(AT) (cd $(top_dir__)/plumed2 && ln -sf $(plumed_config_file) Makefile.conf && \
	  $(MAKE) install VERBOSE=1)

#  ---------------  #
## TCL Package ##
#  ---------------  #
.PHONY: tcl
tcl:
	$(AT) if [ ! -d $(install_libdir) ]; then mkdir -p $(install_libdir); fi
	$(AT) cd $(TCL_HOME) && $(MAKE) VERBOSE=0 EXTRA_CFLAGS="$(TCL_CXX_F)" && mv $(TCL_HOME)/libtcl8.6.so $(install_libdir)
#  ---------------  #
## Colvars Package ##
#  ---------------  #
.PHONY: colvars
colvars:
	@cd $(COLVARS_HOME) &&\
	$(MAKE) TCL_SUPPORT=$(TCL_SUPPORT) TCL_HOME=$(TCL_HOME) CXXFLAGS="$(COLVARS_CXX_F)" libcolvars.a

# Include source code dependencies file
-include depend.mk

#  --------------  #
## Generics rules ##
#  --------------  #
#%.vinl: %.f
#	@touch $@
#	$(RunF77) $(EXTFLAGS) -c $*.f
MOD_spectra.o: MOD_spectra.f
	$(RunF77) $(FFLAGS) -c $*.f -I$(INC_FFTDECOMP)
MOD_qtb.o: MOD_qtb.f
	$(RunF77) $(FFLAGS) -c $*.f -I$(INC_FFTDECOMP)
promoamd.o: promoamd.f
	$(RunF77) $(FFLAGS) -Mbackslash -c $*.f
promosmd.o: promosmd.f
	$(RunF77) $(FFLAGS) -Mbackslash -c $*.f
active.o: active.f
	$(RunF77) $(GPUFLAGS) -c $<
attach.o: attach.f
	$(RunF77) $(GPUFLAGS) -c $<
angles.o: angles.f
	$(RunF77) $(GPUFLAGS) -c $<
bonds.o: bonds.f
	$(RunF77) $(GPUFLAGS) -c $<
bitors.o: bitors.f
	$(RunF77) $(GPUFLAGS) -c $<
cluster.o: cluster.f
	$(RunF77) $(GPUFLAGS) -c $<
domdecstuff.o: domdecstuff.f
	$(RunF77) $(GPUFLAGS) -c $<
lattice.o: lattice.f
	$(RunF77) $(GPUFLAGS) -c $<
torsions.o: torsions.f
	$(RunF77) $(GPUFLAGS) -c $<
%cu.o: %cu.f
	$(RunCUFC) $(CUFFLAGS) -c $*cu.f
%cu.o: %cu.f90
	$(RunCUFC) $(CUFFLAGS) -c $<
%.o: %.cu
	$(RunCUCC) $(CUCFLAGS) -c $*.cu
%gpu.o: %gpu.f
	$(RunF77) $(GPUFLAGS) -c $*gpu.f
%gpu.o: %gpu.f90
	$(RunF77) $(GPUFLAGS) -c $<
e%.o: e%.f
	$(RunF77) $(GPUFLAGS) -c e$*.f
k%.o: k%.f
	$(RunF77) $(GPUFLAGS) -c k$*.f
%.o: %.cpp %.h
	$(RunCXX) $(CXXFLAGS) -c $*.cpp
%.o: %.f
	$(RunF77) $(FFLAGS) -c $*.f
%.o: %.F
	$(RunF77) $(FFLAGS) -c $*.F
%.o: %.f90
	$(RunF77) $(GPUFLAGS) -I$(INC_FFTDECOMP) -c $*.f90

# -- Build directories
BUILD_DIR     ?= $(top_dir__)/build
TINKER_SOURCE  = $(top_dir__)/source
.PHONY: create_build
create_build:
	mkdir -p $(BUILD_DIR)
	@echo "Linking Tinker-HP source files and Makefile.pgi to $(BUILD_DIR)"
	@cd $(BUILD_DIR); \
	   ln -s $(TINKER_SOURCE)/*.f .; ln -s $(TINKER_SOURCE)/*.f90 .; ln -s $(TINKER_SOURCE)/*.f.inc .;\
	   ln -s $(TINKER_SOURCE)/*.h .; ln -s $(TINKER_SOURCE)/*.cpp .; ln -s $(TINKER_SOURCE)/*.cu .;\
	   ln -s $(TINKER_SOURCE)/*.make .; ln -s $(TINKER_SOURCE)/*.mk .;\
	   ln -s $(TINKER_SOURCE)/*.py .;\
	   ln -s $(TINKER_SOURCE)/Makefile.pgi Makefile;
	@echo "--- done ---"
update_build:
	@echo "Update Tinker-HP source files and Makefile.pgi"
	@ln -s $(TINKER_SOURCE)/*.f . 2>/dev/null; ln -s $(TINKER_SOURCE)/*.f90 . 2>/dev/null; ln -s $(TINKER_SOURCE)/*.f.inc . 2>/dev/null;\
	 ln -s $(TINKER_SOURCE)/*.h . 2>/dev/null; ln -s $(TINKER_SOURCE)/*.cpp .; ln -s $(TINKER_SOURCE)/*.cu . 2>/dev/null;\
	 ln -s $(TINKER_SOURCE)/*.make .; ln -s $(TINKER_SOURCE)/*.mk .;\
	 ln -s $(TINKER_SOURCE)/*.py . 2>/dev/null;\
	 ln -s $(TINKER_SOURCE)/Makefile.pgi Makefile;
	@echo "--- done ---"



#  ------------------  #
## Debug informations ##
#  ------------------  #
infos:
	@echo "architecture       " $(arch) $(REL_BUILD)
	@echo "precision          " $(prec)
	@echo "OPTIONS            " $(pp_flags_f_)
	@echo "CUDA fortan flags  " $(cuda_flags_f_)
	@echo "ACC config         " $(oacc_flags_f_)
	@echo "CUDA config        " $(cuda_flags_c_)
	@echo "FORTRAN config     " $(FFLAGS)
	@echo "CUDA libraries     " $(dev_ldlibs)
	@echo "Programs suffix    " $(bin_sufx)
	@echo -----------------------------------------------------------------------------------
	@[ '$(add_mkl__)' = 'yes' ]   && echo "    MKL Libraries    " $(LIB_MKL) || :
	@[ $(FPA_SUPPORT) -eq 1 ]     && echo "  Fixed Precision Arithmetic Support enabled" || :
	@[ $(PLUMED_SUPPORT) -eq 1 ]  && echo " PLUMED interface enabled" || :
	@[ $(NVTX_SUPPORT) -eq 1 ]    && echo "   NVTX Markers enabled" || :
	@[ $(NVSHMEM_SUPPORT) -eq 1 ] && echo "NVSHMEM feature enabled" || :
	@[ $(TCL_SUPPORT) -eq 1 ]     && echo "    TCL interface enabled" || :
	@[ $(COLVARS_SUPPORT) -eq 1 ] && echo "COLVARS interface enabled" || :
	@[ $(NN_SUPPORT) -eq 1 ]      && echo "NEURAL Network plugin enabled" || :

infos1:
	@echo "FFLAGS     " $(FFLAGS)
	@echo "GPUFLAGS   " $(GPUFLAGS)
	@echo "CUFFLAGS   " $(CUFFLAGS)
	@echo "CXXFLAGS   " $(CXXFLAGS)
	@echo "CUCFLAGS   " $(CUCFLAGS)
	@echo "FFLAGS2    " $(FFLAGS2)

#  --------------  #
## Cleaning rules ##
#  --------------  #
clean:
	@echo
	@echo "*****  Removing Object library and module files  *****"
	@echo
	$(AT)rm -fr $(MODS) $(OBJS) $(PROGOBJ) *.exe *.mod
	$(AT)rm -f libtinker.a *.so
ifeq ($(NN_SUPPORT),1)
	$(AT)rm -f lib$(mlplugin_name).dylib $(mlplugin_installdir)/lib$(mlplugin_name).dylib
endif

distclean:
	$(AT)$(MAKE) clean
	$(AT)cd $(top_dir__)/2decomp_fft && $(MAKE) clean
ifeq ($(arch), $(filter $(arch),device gpu))
	$(AT)cd $(top_dir__)/wrappers    && $(MAKE) clean
endif
ifeq ($(PLUMED_SUPPORT),1)
	$(AT)cd $(top_dir__)/plumed2     && $(MAKE) clean
endif
ifeq ($(TCL_SUPPORT),1)
	$(AT)cd $(top_dir__)/tcl8.6.13/unix  && $(MAKE) clean
endif
ifeq ($(COLVARS_SUPPORT),1)
	$(AT)cd $(top_dir__)/colvars     && $(MAKE) clean
endif

#  -------------------------  #
## 2decomp_fft library rules ##
#  -------------------------  #
2decomp_fft:
ifeq ($(main_prec),s)
	@cd $(FFTDECOMPDIR); ln -sf $(conf_decompfft) src/Makefile.inc ;$(MAKE) "OPTIM=$(DECOMP_FFLAGS)" "OPTIONS=-DOVERWRITE"
else
	@cd $(FFTDECOMPDIR); ln -sf $(conf_decompfft) src/Makefile.inc ;$(MAKE) "OPTIM=$(DECOMP_FFLAGS)"
endif
2decomp_fft_rebuild:
ifeq ($(main_prec),s)
	@cd $(FFTDECOMPDIR); ln -sf $(conf_decompfft) src/Makefile.inc ;$(MAKE) clean; $(MAKE) "OPTIM=$(DECOMP_FFLAGS)" "OPTIONS=-DOVERWRITE"
else
	@cd $(FFTDECOMPDIR); ln -sf $(conf_decompfft) src/Makefile.inc ;$(MAKE) clean; $(MAKE) "OPTIM=$(DECOMP_FFLAGS)"
endif
2decomp_fft_single:
	@echo "This target is deprecated; Please enter the following command"
	@echo "$(MAKE) prec=m 2decomp_fft"
2decomp_fft_rebuild_single:
	@echo "This target is deprecated; Please enter the following command"
	@echo "$(MAKE) prec=m 2decomp_fft_rebuild"
2decomp_fft_clean:
	@cd $(FFTDECOMPDIR); $(MAKE) clean

#  ---------------------  #
## Thrust wrapper target ##
#  ---------------------  #
.PHONY: thrust thrust_clean thrust_lib_rebuild
#
thrust:
	@cd ../wrappers; $(MAKE) "CUDACC=$(RunCUCC)" "FCFLAGS=$(CUFFLAGS)" "CUFLAGS=$(CUCFLAGS)" "AT=$(AT)"
#
thrust_clean:
	@cd ../wrappers; $(MAKE) clean
#
thrust_lib_rebuild:
	@cd ../wrappers; $(MAKE) clean; $(MAKE) "CUDACC=$(RunCUCC)" "FCFLAGS=$(CUFFLAGS)" "CUFLAGS=$(CUCFLAGS)" "AT=$(AT)"
#
tags: tags-mark
	-'rm' -f tags
	ctags *.f
	-'rm' -f tags-mark
#
tags-mark:
	touch tags-mark
#
debug:
	cat *.f > xxx.f
	ftnchek xxx.f
	rm xxx.f

